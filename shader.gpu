// Вершинний шейдер
const vertexShaderSource = `
attribute vec3 vertex;        // Вершинні координати
attribute vec3 normal;        // Нормаль
attribute vec3 tangent;       // Тангенс
attribute vec2 texCoord;      // Текстурні координати

varying vec3 vNormal;         // Нормаль у світовому просторі
varying vec3 vTangent;        // Тангенс
varying vec3 vBitangent;      // Бітангенс
varying vec2 vTexCoord;       // Текстурні координати
varying vec3 vFragPosition;   // Позиція фрагмента у світовому просторі

uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 NormalMatrix;

void main() {
    // Трансформація нормалі
    vec3 transformedNormal = normalize((NormalMatrix * vec4(normal, 0.0)).xyz);

    // Ортогоналізація тангенса відносно нормалі (Грам-Шмідт)
    vec3 transformedTangent = tangent - dot(tangent, transformedNormal) * transformedNormal;
    transformedTangent = normalize(transformedTangent);

    // Обчислення бітангенса
    vec3 transformedBitangent = cross(transformedNormal, transformedTangent);

    // Передача в фрагментний шейдер
    vNormal = transformedNormal;
    vTangent = transformedTangent;
    vBitangent = transformedBitangent;
    vTexCoord = texCoord;

    // Позиція фрагмента
    vec4 fragPosition = ModelViewMatrix * vec4(vertex, 1.0);
    vFragPosition = fragPosition.xyz;

    // Позиція вершини
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}
`;

// Фрагментний шейдер
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 vNormal;
varying vec3 vTangent;
varying vec3 vBitangent;
varying vec2 vTexCoord;
varying vec3 vFragPosition;

uniform vec3 lightPosition;    // Позиція джерела світла
uniform vec3 viewPosition;   // Позиція камери

uniform sampler2D diffuseMap;  // Дифузна текстура
uniform sampler2D specularMap; // Дзеркальна текстура
uniform sampler2D normalMap;   // Нормальна текстура

void main() {
    // Витяг нормалі з нормальної текстури
    vec3 normalMapValue = texture2D(normalMap, vTexCoord).rgb * 2.0 - 1.0;

    // Трансформація нормалі з текстурного простору у світовий
    mat3 TBN = mat3(vTangent, vBitangent, vNormal);
    vec3 transformedNormal = normalize(TBN * normalMapValue);

    // Освітлення
    vec3 lightDir = normalize(lightPosition - vFragPosition);
    vec3 viewDir = normalize(viewPosition - vFragPosition);
    vec3 reflectDir = reflect(-lightDir, transformedNormal);

    // Дифузний компонент
    float diff = max(dot(normalMapValue, lightDir), 0.1);
    vec3 diffuseColor = texture2D(diffuseMap, vTexCoord).rgb;

    // Дзеркальний компонент
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
    vec3 specularColor = texture2D(specularMap, vTexCoord).rgb;

    // Фінальний колір
    vec3 finalColor = diff * diffuseColor + spec * specularColor;

    gl_FragColor = vec4(finalColor, 1.0);
}
`;

